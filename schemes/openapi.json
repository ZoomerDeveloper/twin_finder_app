{
  "openapi": "3.1.0",
  "info": {
    "title": "Twin Finder Backend",
    "description": "\n        # TwinFinder Backend API\n        \n        A comprehensive API for the TwinFinder social app that uses facial recognition technology \n        to match users with their closest visual doppelg√§ngers.\n        \n        ## üîê Authentication\n        \n        The API uses JWT-based authentication with access and refresh tokens:\n        \n        - **Access Tokens**: Short-lived tokens (1 hour) for API authentication\n        - **Refresh Tokens**: Long-lived tokens (7-30 days) for token renewal\n        - **Token Rotation**: Refresh tokens are single-use and invalidated after use\n        \n        ## üìö API Documentation\n        \n        - **Swagger UI**: Interactive API documentation at `/docs`\n        - **ReDoc**: Alternative documentation at `/redoc`\n        - **OpenAPI Schema**: Raw OpenAPI specification at `/api/v1/openapi.json`\n        \n        ## üöÄ Quick Start\n        \n        1. **Register**: Use `/api/v1/auth/register/initiate` and `/api/v1/auth/register/confirm`\n        2. **Login**: Use `/api/v1/auth/login` to get JWT tokens\n        3. **Authenticate**: Include `Authorization: Bearer \u003Caccess_token\u003E` in requests\n        4. **Refresh**: Use `/api/v1/auth/refresh` to get new tokens\n        5. **Logout**: Use `/api/v1/auth/logout` to invalidate tokens\n        \n        ## üîí Security Features\n        \n        - JWT-based authentication with secure token handling\n        - Rate limiting on API endpoints\n        - CORS protection with configurable origins\n        - Input validation with Pydantic schemas\n        - Secure file upload handling\n        - GDPR compliance features\n        \n        ## üìä Rate Limiting\n        \n        API endpoints are rate-limited to prevent abuse:\n        \n        - Authentication endpoints: 5 requests per minute\n        - General endpoints: 100 requests per minute\n        - File uploads: 10 requests per minute\n        \n        ## üõ†Ô∏è Development\n        \n        - **Environment**: Set `ENVIRONMENT=development` for detailed error messages\n        - **Logging**: Structured logging with configurable levels\n        - **Health Check**: Use `/health` to check API status\n        ",
    "contact": {
      "name": "TwinFinder Support",
      "email": "support@twinfinder.app"
    },
    "license": {
      "name": "Proprietary - All rights reserved",
      "url": "https://twinfinder.app/legal"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://161.97.64.169:8000",
      "description": "Current server"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "API Information",
        "description": "Root endpoint providing basic API information and links to documentation.\n             \n             This endpoint is useful for:\n             - Checking if the API is running\n             - Getting API version information\n             - Finding links to documentation\n             - Health monitoring and uptime checks",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "API information including version and documentation links",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Health check endpoint for monitoring API status and performance.\n             \n             This endpoint is designed for:\n             - Load balancer health checks\n             - Monitoring system integration\n             - DevOps deployment verification\n             - API status monitoring",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Health status including API version and environment",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/health/detailed": {
      "get": {
        "summary": "Detailed Health Check",
        "description": "Detailed health check endpoint for comprehensive system monitoring.\n             \n             This endpoint provides detailed health information for:\n             - Database connectivity and metrics\n             - Redis connectivity and metrics\n             - Application status and configuration\n             - Component-level health status",
        "operationId": "detailed_health_check_health_detailed_get",
        "responses": {
          "200": {
            "description": "Detailed health status including all system components",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "summary": "Prometheus Metrics",
        "description": "Prometheus metrics endpoint for monitoring and alerting.\n             \n             This endpoint exposes application metrics in Prometheus format for:\n             - Request/response metrics\n             - Error rates and types\n             - Performance metrics\n             - Application health indicators",
        "operationId": "metrics_metrics_get",
        "responses": {
          "200": {
            "description": "Prometheus-formatted metrics",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Login",
        "description": "Authenticate user and return JWT tokens.\n\nThis endpoint authenticates a user with their email and password, returning\nJWT access and refresh tokens upon successful authentication.\n\n**Authentication Flow:**\n1. User provides email and password\n2. System validates credentials against database\n3. If valid, generates JWT tokens\n4. Returns tokens for subsequent API calls\n\n**Security Features:**\n- Password is hashed and compared securely\n- JWT tokens have configurable expiration times\n- Refresh tokens allow for token renewal without re-authentication\n\nArgs:\n    login_data: Login credentials containing email and password\n    auth_service: Authentication service dependency\n    \nReturns:\n    AuthResponse: Authentication response containing:\n        - success: Boolean indicating operation success\n        - message: Human-readable response message\n        - data: Token object with access_token, refresh_token, and metadata\n        \nRaises:\n    HTTPException (401): If email or password is incorrect\n    HTTPException (422): If request data validation fails\n    \nExample Request:\n    ```json\n    {\n        \"email\": \"user@example.com\",\n        \"password\": \"securepassword123\"\n    }\n    ```\n    \nExample Response:\n    ```json\n    {\n        \"success\": true,\n        \"message\": \"Login successful\",\n        \"data\": {\n            \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n            \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n            \"token_type\": \"bearer\",\n            \"expires_in\": 3600\n        }\n    }\n    ```",
        "operationId": "login_api_v1_auth_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login/oauth2": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Login Oauth2",
        "description": "OAuth2 compatible token endpoint.\n\nThis endpoint provides OAuth2-compatible authentication for third-party\napplications and OAuth2 clients. It accepts form-encoded data instead of JSON.\n\n**OAuth2 Compatibility:**\n- Accepts standard OAuth2 password grant flow\n- Uses form-encoded data (application/x-www-form-urlencoded)\n- Returns standard OAuth2 token response format\n- Compatible with OAuth2 libraries and tools\n\n**Use Cases:**\n- Third-party application integration\n- OAuth2 client libraries\n- API testing tools that expect OAuth2 format\n\nArgs:\n    form_data: OAuth2PasswordRequestForm containing:\n        - username: User's email address\n        - password: User's password\n        - grant_type: Should be \"password\" for this endpoint\n    auth_service: Authentication service dependency\n    \nReturns:\n    AuthResponse: Authentication response with JWT tokens\n    \nRaises:\n    HTTPException (401): If username or password is incorrect\n    HTTPException (422): If form data validation fails\n    \nExample Request (form-encoded):\n    ```\n    username=user@example.com&password=securepassword123&grant_type=password\n    ```\n    \nExample Response:\n    ```json\n    {\n        \"success\": true,\n        \"message\": \"Login successful\",\n        \"data\": {\n            \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n            \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n            \"token_type\": \"bearer\",\n            \"expires_in\": 3600\n        }\n    }\n    ```",
        "operationId": "login_oauth2_api_v1_auth_login_oauth2_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_oauth2_api_v1_auth_login_oauth2_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/register/initiate": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Initiate Registration",
        "description": "Initiate email registration process (Step 1 of 2).\n\nThis endpoint starts the two-step email registration process by sending\na verification code to the provided email address.\n\n**Registration Flow:**\n1. User provides email address\n2. System validates email format and availability\n3. Verification code is generated and sent via email\n4. User receives code and proceeds to step 2\n\n**Security Features:**\n- Email validation and availability check\n- Rate limiting on email sending\n- Verification codes expire after 15 minutes\n- Prevents duplicate registrations\n\nArgs:\n    registration_data: EmailRegistrationRequest containing:\n        - email: Valid email address for registration\n    auth_service: Authentication service dependency\n    \nReturns:\n    AuthResponse: Response indicating verification code was sent\n    \nRaises:\n    HTTPException (400): If email already exists\n    HTTPException (400): If registration already pending\n    HTTPException (422): If email format is invalid\n    \nExample Request:\n    ```json\n    {\n        \"email\": \"newuser@example.com\"\n    }\n    ```\n    \nExample Response:\n    ```json\n    {\n        \"success\": true,\n        \"message\": \"Verification code sent to your email. Please check your inbox and enter the code to complete registration.\",\n        \"data\": null\n    }\n    ```",
        "operationId": "initiate_registration_api_v1_auth_register_initiate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailRegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/register/confirm": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Confirm Registration",
        "description": "Confirm email registration and create user account (Step 2 of 2).\n\nThis endpoint completes the registration process by verifying the email\nverification code and creating the user account with the provided details.\n\n**Registration Completion:**\n1. User provides email, verification code, password, and name\n2. System validates verification code and expiration\n3. User account is created with hashed password\n4. JWT tokens are generated and returned\n5. User is automatically logged in\n\n**Security Features:**\n- Verification code validation and expiration check\n- Password hashing using bcrypt\n- Automatic account activation\n- GDPR consent tracking\n\nArgs:\n    confirmation_data: EmailRegistrationConfirm containing:\n        - email: Email address used in step 1\n        - verification_code: 6-digit code sent via email\n        - password: User's chosen password (min 8 characters)\n        - name: User's display name\n    auth_service: Authentication service dependency\n    \nReturns:\n    AuthResponse: Authentication response with JWT tokens\n    \nRaises:\n    HTTPException (400): If verification code is invalid\n    HTTPException (400): If verification code has expired\n    HTTPException (400): If email not found in pending registrations\n    HTTPException (422): If request data validation fails\n    \nExample Request:\n    ```json\n    {\n        \"email\": \"newuser@example.com\",\n        \"verification_code\": \"123456\",\n        \"password\": \"securepassword123\",\n        \"name\": \"John Doe\"\n    }\n    ```\n    \nExample Response:\n    ```json\n    {\n        \"success\": true,\n        \"message\": \"Registration completed successfully! Welcome to TwinFinder.\",\n        \"data\": {\n            \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n            \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n            \"token_type\": \"bearer\",\n            \"expires_in\": 3600\n        }\n    }\n    ```",
        "operationId": "confirm_registration_api_v1_auth_register_confirm_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailRegistrationConfirm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/register": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Register",
        "description": "Register a new user account (Legacy endpoint - deprecated).\n\n**‚ö†Ô∏è DEPRECATED: Use /register/initiate and /register/confirm instead**\n\nThis legacy endpoint creates a user account directly without email verification.\nIt's maintained for backward compatibility but should not be used in new applications.\n\n**Security Considerations:**\n- No email verification required\n- Account is created immediately\n- Less secure than the two-step registration process\n- Email verification token is generated but not required for login\n\n**Migration Path:**\n- New applications should use /register/initiate and /register/confirm\n- This endpoint will be removed in a future version\n\nArgs:\n    email: User's email address (must be unique)\n    password: User's password (minimum 8 characters)\n    name: User's display name\n    auth_service: Authentication service dependency\n    \nReturns:\n    AuthResponse: Authentication response with JWT tokens\n    \nRaises:\n    HTTPException (400): If email already exists\n    HTTPException (422): If request data validation fails\n    \nExample Request:\n    ```json\n    {\n        \"email\": \"user@example.com\",\n        \"password\": \"securepassword123\",\n        \"name\": \"John Doe\"\n    }\n    ```\n    \nExample Response:\n    ```json\n    {\n        \"success\": true,\n        \"message\": \"Registration successful. Please verify your email.\",\n        \"data\": {\n            \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n            \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n            \"token_type\": \"bearer\",\n            \"expires_in\": 3600\n        }\n    }\n    ```",
        "operationId": "register_api_v1_auth_register_post",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Email"
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Password"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Refresh Tokens",
        "description": "Refresh access token using refresh token.\n\nThis endpoint allows users to obtain a new access token using their refresh token,\nwithout requiring re-authentication. This is useful for maintaining user sessions\nand providing seamless user experience.\n\n**Token Refresh Flow:**\n1. User provides their refresh token\n2. System validates the refresh token\n3. If valid, new access and refresh tokens are generated\n4. Old refresh token is invalidated (one-time use)\n\n**Security Features:**\n- Refresh tokens are single-use (invalidated after use)\n- Automatic token rotation for enhanced security\n- Refresh token expiration validation\n- Blacklist checking for revoked tokens\n\n**Use Cases:**\n- Extending user sessions\n- Automatic token renewal in mobile apps\n- Maintaining user state across browser sessions\n\nArgs:\n    refresh_data: RefreshTokenRequest containing:\n        - refresh_token: Valid JWT refresh token\n    auth_service: Authentication service dependency\n    \nReturns:\n    AuthResponse: Authentication response with new JWT tokens\n    \nRaises:\n    HTTPException (401): If refresh token is invalid or expired\n    HTTPException (401): If refresh token is blacklisted\n    HTTPException (422): If request data validation fails\n    \nExample Request:\n    ```json\n    {\n        \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n    }\n    ```\n    \nExample Response:\n    ```json\n    {\n        \"success\": true,\n        \"message\": \"Tokens refreshed successfully\",\n        \"data\": {\n            \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n            \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n            \"token_type\": \"bearer\",\n            \"expires_in\": 3600\n        }\n    }\n    ```",
        "operationId": "refresh_tokens_api_v1_auth_refresh_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Logout",
        "description": "Logout user by blacklisting refresh token.\n\nThis endpoint securely logs out a user by blacklisting their refresh token,\npreventing it from being used for future token refreshes. This ensures that\neven if the refresh token is compromised, it cannot be used after logout.\n\n**Logout Flow:**\n1. User provides their refresh token\n2. System validates the refresh token\n3. Token is added to blacklist with logout reason\n4. User is effectively logged out from all sessions using this token\n\n**Security Features:**\n- Refresh token blacklisting for immediate invalidation\n- Audit trail with logout reason\n- Prevents token reuse after logout\n- Maintains security even if tokens are compromised\n\n**Best Practices:**\n- Always call this endpoint when user logs out\n- Clear local token storage on client side\n- Implement automatic logout on token expiration\n\nArgs:\n    logout_data: LogoutRequest containing:\n        - refresh_token: JWT refresh token to blacklist\n    auth_service: Authentication service dependency\n    \nReturns:\n    AuthResponse: Response confirming successful logout\n    \nRaises:\n    HTTPException (400): If refresh token is invalid\n    HTTPException (422): If request data validation fails\n    \nExample Request:\n    ```json\n    {\n        \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n    }\n    ```\n    \nExample Response:\n    ```json\n    {\n        \"success\": true,\n        \"message\": \"Logout successful\",\n        \"data\": null\n    }\n    ```",
        "operationId": "logout_api_v1_auth_logout_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/me": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Get Current User Info",
        "description": "Get current user information.\n\nArgs:\n    current_user: Current authenticated user\n    auth_service: Authentication service\n\nReturns:\n    User authentication information",
        "operationId": "get_current_user_info_api_v1_auth_me_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/forgot-password": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Forgot Password",
        "description": "Request password reset.\n\nArgs:\n    reset_data: Password reset request data\n    auth_service: Authentication service\n\nReturns:\n    Authentication response",
        "operationId": "forgot_password_api_v1_auth_forgot_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/reset-password": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Reset Password",
        "description": "Reset password using reset token.\n\nArgs:\n    reset_data: Password reset confirmation data\n    auth_service: Authentication service\n\nReturns:\n    Authentication response\n\nRaises:\n    HTTPException: If token is invalid or expired",
        "operationId": "reset_password_api_v1_auth_reset_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetConfirm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/verify-email": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Verify Email",
        "description": "Verify email using verification token.\n\nArgs:\n    verification_data: Email verification data\n    auth_service: Authentication service\n\nReturns:\n    Authentication response\n\nRaises:\n    HTTPException: If token is invalid or expired",
        "operationId": "verify_email_api_v1_auth_verify_email_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailVerificationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/change-password": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Change Password",
        "description": "Change user password.\n\nArgs:\n    current_password: Current password\n    new_password: New password\n    current_user: Current authenticated user\n    auth_service: Authentication service\n\nReturns:\n    Authentication response\n\nRaises:\n    HTTPException: If current password is incorrect",
        "operationId": "change_password_api_v1_auth_change_password_post",
        "parameters": [
          {
            "name": "current_password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Current Password"
            }
          },
          {
            "name": "new_password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "New Password"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/blacklist-token": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Blacklist Token",
        "description": "Blacklist a token (admin function).\n\nArgs:\n    blacklist_data: Token blacklist data\n    auth_service: Authentication service\n\nReturns:\n    Token blacklist response",
        "operationId": "blacklist_token_api_v1_auth_blacklist_token_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenBlacklistRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenBlacklistResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login/google": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Login Google",
        "description": "Authenticate user with Google OAuth (Mobile Flow).\n\nThis endpoint is designed for mobile applications that use Google Sign-In SDK\nand receive ID tokens directly from the mobile app.\n\nArgs:\n    login_data: Google login request data with ID token\n    auth_service: Authentication service\n\nReturns:\n    Social login response with tokens and user info\n\nRaises:\n    HTTPException: If Google authentication fails",
        "operationId": "login_google_api_v1_auth_login_google_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoogleLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialLoginResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login/google/web": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Login Google Web",
        "description": "Authenticate user with Google OAuth (Web Flow).\n\nThis endpoint is designed for web applications that use OAuth2 authorization code flow.\nThe frontend redirects users to Google OAuth, gets an authorization code, and sends it here.\n\nArgs:\n    code: Authorization code from Google OAuth\n    state: Optional state parameter for CSRF protection\n    auth_service: Authentication service\n\nReturns:\n    Social login response with tokens and user info\n\nRaises:\n    HTTPException: If Google authentication fails",
        "operationId": "login_google_web_api_v1_auth_login_google_web_get",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Code"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "State"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialLoginResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login/apple": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Login Apple",
        "description": "Authenticate user with Apple OAuth.\n\nArgs:\n    login_data: Apple login request data\n    auth_service: Authentication service\n\nReturns:\n    Social login response with tokens and user info\n\nRaises:\n    HTTPException: If Apple authentication fails",
        "operationId": "login_apple_api_v1_auth_login_apple_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppleLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialLoginResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/oauth/{provider}/url": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Get Oauth Url",
        "description": "Get OAuth authorization URL for the specified provider.\n\nArgs:\n    provider: OAuth provider (google, apple)\n    redirect_uri: OAuth redirect URI\n    state: Optional state parameter for CSRF protection\n    platform: Optional platform specification ('ios', 'android', 'web')\n    auth_service: Authentication service\n\nReturns:\n    OAuth authorization URL\n\nRaises:\n    HTTPException: If provider is not supported",
        "operationId": "get_oauth_url_api_v1_auth_oauth__provider__url_get",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Provider"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Redirect Uri"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "State"
            }
          },
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Platform"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Oauth Url Api V1 Auth Oauth  Provider  Url Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/oauth/{provider}/url/{platform}": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Get Platform Oauth Url",
        "description": "Get platform-specific OAuth authorization URL.\n\nArgs:\n    provider: OAuth provider (google, apple)\n    platform: Platform specification ('ios', 'android', 'web')\n    redirect_uri: OAuth redirect URI\n    state: Optional state parameter for CSRF protection\n    auth_service: Authentication service\n\nReturns:\n    Platform-specific OAuth authorization URL\n\nRaises:\n    HTTPException: If provider or platform is not supported",
        "operationId": "get_platform_oauth_url_api_v1_auth_oauth__provider__url__platform__get",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Provider"
            }
          },
          {
            "name": "platform",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Platform"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Redirect Uri"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "State"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Platform Oauth Url Api V1 Auth Oauth  Provider  Url  Platform  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/oauth/{provider}/info": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Get Oauth Provider Info",
        "description": "Get OAuth provider configuration information.\n\nArgs:\n    provider: OAuth provider name (google, apple)\n    auth_service: Authentication service\n\nReturns:\n    Provider configuration information\n\nRaises:\n    HTTPException: If provider is not supported",
        "operationId": "get_oauth_provider_info_api_v1_auth_oauth__provider__info_get",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Provider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthProviderInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/oauth/{provider}/callback": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Oauth Callback",
        "description": "Handle OAuth callback from provider.\n\nArgs:\n    provider: OAuth provider (google, apple)\n    callback_data: OAuth callback data\n    auth_service: Authentication service\n\nReturns:\n    OAuth callback response\n\nRaises:\n    HTTPException: If callback handling fails",
        "operationId": "oauth_callback_api_v1_auth_oauth__provider__callback_post",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Provider"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuthCallbackRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Oauth Callback Api V1 Auth Oauth  Provider  Callback Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/oauth/google/callback": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Google Oauth Callback",
        "description": "Handle Google OAuth callback for web applications.\n\nThis endpoint is called by Google after the user authorizes the application.\nIt receives the authorization code and exchanges it for user information.\n\nArgs:\n    code: Authorization code from Google\n    state: Optional state parameter for CSRF protection\n    error: Optional error parameter if authorization failed\n    auth_service: Authentication service\n\nReturns:\n    OAuth callback response with user authentication result\n\nRaises:\n    HTTPException: If callback handling fails",
        "operationId": "google_oauth_callback_api_v1_auth_oauth_google_callback_get",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Code"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "State"
            }
          },
          {
            "name": "error",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Google Oauth Callback Api V1 Auth Oauth Google Callback Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/health": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Auth Health",
        "description": "Authentication service health check.\n\nReturns:\n    Health status",
        "operationId": "auth_health_api_v1_auth_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Auth Health Api V1 Auth Health Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/oauth/google/detailed-info": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Get Google Oauth Detailed Info",
        "description": "Get detailed Google OAuth configuration information for mobile platforms.\n\nArgs:\n    auth_service: Authentication service\n\nReturns:\n    Detailed Google OAuth configuration information\n\nRaises:\n    HTTPException: If Google OAuth is not configured",
        "operationId": "get_google_oauth_detailed_info_api_v1_auth_oauth_google_detailed_info_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Google Oauth Detailed Info Api V1 Auth Oauth Google Detailed Info Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/me": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get My Profile",
        "description": "Retrieve the current authenticated user's profile information.\n            \n            This endpoint returns the complete profile data for the currently\n            authenticated user, including personal information, preferences,\n            and account status.\n            \n            **Authentication Required**: Valid JWT access token in Authorization header\n            **Rate Limiting**: 100 requests per minute",
        "operationId": "get_my_profile_api_v1_users_me_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User profile data including personal information and preferences",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update My Profile",
        "description": "Update the current authenticated user's profile information.\n            \n            This endpoint allows users to modify their profile data including\n            personal information, bio, and preferences. All fields are optional\n            and only provided fields will be updated.\n            \n            **Authentication Required**: Valid JWT access token in Authorization header\n            **Rate Limiting**: 10 requests per minute",
        "operationId": "update_my_profile_api_v1_users_me_put",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated user profile data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete My Account (GDPR)",
        "description": "Permanently delete the current user's account and all associated data.\n               \n               This endpoint completely removes the user's account, profile, photos,\n               matches, and all related data from the system. This action is\n               irreversible and complies with GDPR right to erasure requirements.\n               \n               **‚ö†Ô∏è WARNING: This action is irreversible!**\n               \n               **GDPR Compliance:**\n               - Complete data deletion (right to erasure)\n               - Audit logging of deletion requests\n               - Removal of all personal data\n               - File system cleanup\n               \n               **Authentication Required**: Valid JWT access token in Authorization header\n               **Rate Limiting**: 1 request per hour",
        "operationId": "delete_my_account_api_v1_users_me_delete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account deletion confirmation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Delete My Account Api V1 Users Me Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/gdpr-data": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Export My Data (GDPR)",
        "description": "Export all personal data for the current user in compliance with GDPR.\n            \n            This endpoint provides a complete export of all user data including\n            profile information, photos, matches, and activity logs. The data\n            is returned in a structured JSON format suitable for data portability.\n            \n            **GDPR Compliance:**\n            - Complete data export for data portability\n            - Audit logging of export requests\n            - Structured data format\n            - All personal data included\n            \n            **Authentication Required**: Valid JWT access token in Authorization header\n            **Rate Limiting**: 5 requests per hour",
        "operationId": "export_my_data_api_v1_users_gdpr_data_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Complete user data export in JSON format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Export My Data Api V1 Users Gdpr Data Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/photos/upload": {
      "post": {
        "tags": [
          "photos"
        ],
        "summary": "Upload Photo",
        "description": "Upload a new photo for the current user.",
        "operationId": "upload_photo_api_v1_photos_upload_post",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_photo_api_v1_photos_upload_post"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhotoUploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/photos/{photo_id}": {
      "get": {
        "tags": [
          "photos"
        ],
        "summary": "Get Photo",
        "description": "Get a photo by ID for the current user.",
        "operationId": "get_photo_api_v1_photos__photo_id__get",
        "parameters": [
          {
            "name": "photo_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Photo Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhotoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "photos"
        ],
        "summary": "Delete Photo",
        "description": "Delete a photo by ID for the current user.",
        "operationId": "delete_photo_api_v1_photos__photo_id__delete",
        "parameters": [
          {
            "name": "photo_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Photo Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhotoDeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matches/generate": {
      "post": {
        "tags": [
          "matches"
        ],
        "summary": "Generate mock matches",
        "description": "Generate mock matches for the current user using random selection and similarity scoring.",
        "operationId": "generate_matches_api_v1_matches_generate_post",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchGenerationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchGenerationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matches/": {
      "get": {
        "tags": [
          "matches"
        ],
        "summary": "Get user matches",
        "description": "Get paginated list of matches for the current user with optional filtering.",
        "operationId": "get_matches_api_v1_matches__get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number (1-based)",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number (1-based)"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of matches per page",
              "default": 20,
              "title": "Per Page"
            },
            "description": "Number of matches per page"
          },
          {
            "name": "viewed_only",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by viewed status",
              "title": "Viewed Only"
            },
            "description": "Filter by viewed status"
          },
          {
            "name": "min_similarity",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Minimum similarity score filter",
              "title": "Min Similarity"
            },
            "description": "Minimum similarity score filter"
          },
          {
            "name": "max_similarity",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Maximum similarity score filter",
              "title": "Max Similarity"
            },
            "description": "Maximum similarity score filter"
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matches/{match_id}": {
      "get": {
        "tags": [
          "matches"
        ],
        "summary": "Get specific match",
        "description": "Get a specific match by ID for the current user.",
        "operationId": "get_match_api_v1_matches__match_id__get",
        "parameters": [
          {
            "name": "match_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchWithUser"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "matches"
        ],
        "summary": "Update match",
        "description": "Update a match with new data (similarity score, viewed status).",
        "operationId": "update_match_api_v1_matches__match_id__patch",
        "parameters": [
          {
            "name": "match_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchWithUser"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "matches"
        ],
        "summary": "Delete match",
        "description": "Delete a specific match for the current user.",
        "operationId": "delete_match_api_v1_matches__match_id__delete",
        "parameters": [
          {
            "name": "match_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matches/{match_id}/view": {
      "post": {
        "tags": [
          "matches"
        ],
        "summary": "Mark match as viewed",
        "description": "Mark a specific match as viewed by the current user.",
        "operationId": "mark_match_as_viewed_api_v1_matches__match_id__view_post",
        "parameters": [
          {
            "name": "match_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchWithUser"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matches/stats/summary": {
      "get": {
        "tags": [
          "matches"
        ],
        "summary": "Get match statistics",
        "description": "Get comprehensive statistics about the current user's matches.",
        "operationId": "get_match_stats_api_v1_matches_stats_summary_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchStats"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matches/stats/unviewed-count": {
      "get": {
        "tags": [
          "matches"
        ],
        "summary": "Get unviewed match count",
        "description": "Get the count of unviewed matches for the current user.",
        "operationId": "get_unviewed_count_api_v1_matches_stats_unviewed_count_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matches/discover": {
      "get": {
        "tags": [
          "matches"
        ],
        "summary": "Discover matches for endless scroll",
        "description": "Get matches for discovery with endless scroll functionality. Returns up to 8 matches ordered from least to most relevant, filtered by minimum 60% similarity score.",
        "operationId": "discover_matches_api_v1_matches_discover_get",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of matches to skip for pagination",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of matches to skip for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 8,
              "minimum": 1,
              "description": "Number of matches to return (max 8)",
              "default": 8,
              "title": "Limit"
            },
            "description": "Number of matches to return (max 8)"
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDiscoveryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/share/generate-card": {
      "post": {
        "tags": [
          "share"
        ],
        "summary": "Generate Share Card",
        "description": "Generate a share card for the current user.\n\nCreates a beautiful share card with the user's photo and top 3 matches,\nincluding similarity percentages and decorative elements.",
        "operationId": "generate_share_card_api_v1_share_generate_card_post",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareCardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareCardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "share"
        ],
        "summary": "Generate Share Card Direct",
        "description": "Generate and return share card as direct image response.\n\nReturns the PNG image directly for easy embedding in web pages\nor mobile apps.",
        "operationId": "generate_share_card_direct_api_v1_share_generate_card_get",
        "parameters": [
          {
            "name": "force_regenerate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Force Regenerate"
            }
          },
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Platform"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/share/card-info": {
      "get": {
        "tags": [
          "share"
        ],
        "summary": "Get Share Card Info Endpoint",
        "description": "Get information about the current user's share card.\n\nReturns metadata about the share card without generating the actual image.\nUseful for previews and UI planning.",
        "operationId": "get_share_card_info_endpoint_api_v1_share_card_info_get",
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Platform"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareCardInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/share/clear-cache": {
      "delete": {
        "tags": [
          "share"
        ],
        "summary": "Clear User Share Cache",
        "description": "Clear the current user's share card cache.\n\nForces regeneration of share cards on next request.",
        "operationId": "clear_user_share_cache_api_v1_share_clear_cache_delete",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Clear User Share Cache Api V1 Share Clear Cache Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/share/cache-stats": {
      "get": {
        "tags": [
          "share"
        ],
        "summary": "Get Share Cache Stats",
        "description": "Get share card cache statistics.\n\nReturns information about cache usage and performance.",
        "operationId": "get_share_cache_stats_api_v1_share_cache_stats_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheStats"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/share/detect-platform": {
      "post": {
        "tags": [
          "share"
        ],
        "summary": "Detect Platform Endpoint",
        "description": "Detect social media platform from user agent, referer, or URL.\n\nReturns the detected platform and its metadata.",
        "operationId": "detect_platform_endpoint_api_v1_share_detect_platform_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformDetectionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformDetectionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/share/generate-text": {
      "post": {
        "tags": [
          "share"
        ],
        "summary": "Generate Share Text Endpoint",
        "description": "Generate platform-specific share text.\n\nCreates optimized share text for the specified social media platform.",
        "operationId": "generate_share_text_endpoint_api_v1_share_generate_text_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareTextRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareTextResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/share/track-share": {
      "post": {
        "tags": [
          "share"
        ],
        "summary": "Track Share Endpoint",
        "description": "Track a share for analytics.\n\nRecords share statistics for the current user and platform.",
        "operationId": "track_share_endpoint_api_v1_share_track_share_post",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrackShareRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackShareResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/share/statistics": {
      "get": {
        "tags": [
          "share"
        ],
        "summary": "Get Share Statistics Endpoint",
        "description": "Get share statistics for the current user.\n\nReturns analytics about the user's sharing activity.",
        "operationId": "get_share_statistics_endpoint_api_v1_share_statistics_get",
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 30,
              "title": "Days"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareStatisticsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/share/platforms": {
      "get": {
        "tags": [
          "share"
        ],
        "summary": "Get Supported Platforms",
        "description": "Get list of supported social media platforms.\n\nReturns metadata for all supported platforms.",
        "operationId": "get_supported_platforms_api_v1_share_platforms_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/app__schemas__share__SocialPlatformInfo"
                  },
                  "type": "array",
                  "title": "Response Get Supported Platforms Api V1 Share Platforms Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/share/health": {
      "get": {
        "tags": [
          "share"
        ],
        "summary": "Share Health Check",
        "description": "Health check for share card service.\n\nReturns the status of share card generation capabilities.",
        "operationId": "share_health_check_api_v1_share_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Share Health Check Api V1 Share Health Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/referral/referral-link": {
      "post": {
        "tags": [
          "referral"
        ],
        "summary": "Generate Referral Link",
        "description": "Generate a referral link for the current user.\n\nCreates a referral link with tracking parameters and device-specific redirects.",
        "operationId": "generate_referral_link_api_v1_referral_referral_link_post",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferralLinkRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralLinkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "referral"
        ],
        "summary": "Get Referral Link Endpoint",
        "description": "Get the current user's referral link.\n\nReturns the user's referral link with optional source parameter.",
        "operationId": "get_referral_link_endpoint_api_v1_referral_referral_link_get",
        "parameters": [
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Source"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralLinkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/referral/track-click": {
      "post": {
        "tags": [
          "referral"
        ],
        "summary": "Track Referral Click",
        "description": "Track a referral link click.\n\nRecords a referral click and returns device-specific app store URL.",
        "operationId": "track_referral_click_api_v1_referral_track_click_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferralClickRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralClickResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/referral/ref/{referral_code}": {
      "get": {
        "tags": [
          "referral"
        ],
        "summary": "Handle Referral Redirect",
        "description": "Handle referral link redirects.\n\nTracks the click and redirects to the appropriate app store based on device.",
        "operationId": "handle_referral_redirect_api_v1_referral_ref__referral_code__get",
        "parameters": [
          {
            "name": "referral_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Referral Code"
            }
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Source"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/referral/stats": {
      "get": {
        "tags": [
          "referral"
        ],
        "summary": "Get Referral Statistics Endpoint",
        "description": "Get referral statistics for the current user.\n\nReturns comprehensive statistics including conversion rates and source breakdown.",
        "operationId": "get_referral_statistics_endpoint_api_v1_referral_stats_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralStatisticsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/referral/history": {
      "get": {
        "tags": [
          "referral"
        ],
        "summary": "Get Referral History Endpoint",
        "description": "Get referral history for the current user.\n\nReturns a list of referral records with conversion details.",
        "operationId": "get_referral_history_endpoint_api_v1_referral_history_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralHistoryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/referral/convert": {
      "post": {
        "tags": [
          "referral"
        ],
        "summary": "Convert Referral Endpoint",
        "description": "Convert a referral click to a successful referral.\n\nThis endpoint is typically called when a referred user signs up.",
        "operationId": "convert_referral_endpoint_api_v1_referral_convert_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferralConversionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralConversionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/referral/validate-code": {
      "post": {
        "tags": [
          "referral"
        ],
        "summary": "Validate Referral Code Endpoint",
        "description": "Validate a referral code.\n\nChecks if a referral code exists and is valid.",
        "operationId": "validate_referral_code_endpoint_api_v1_referral_validate_code_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferralCodeValidationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralCodeValidationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/referral/detect-device": {
      "post": {
        "tags": [
          "referral"
        ],
        "summary": "Detect Device Endpoint",
        "description": "Detect device type from user agent string.\n\nReturns detailed device information and appropriate app store URL.",
        "operationId": "detect_device_endpoint_api_v1_referral_detect_device_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/referral/dashboard": {
      "get": {
        "tags": [
          "referral"
        ],
        "summary": "Get Referral Dashboard",
        "description": "Get comprehensive referral dashboard data.\n\nReturns statistics, recent history, and platform information in one call.",
        "operationId": "get_referral_dashboard_api_v1_referral_dashboard_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralDashboardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/referral/health": {
      "get": {
        "tags": [
          "referral"
        ],
        "summary": "Referral Health Check",
        "description": "Health check endpoint for referral system.\n\nReturns basic health information about the referral service.",
        "operationId": "referral_health_check_api_v1_referral_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Referral Health Check Api V1 Referral Health Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/login": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Admin Login",
        "description": "Admin login endpoint.",
        "operationId": "admin_login_api_v1_admin_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLoginResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/refresh": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Admin Refresh Token",
        "description": "Refresh admin access token.",
        "operationId": "admin_refresh_token_api_v1_admin_refresh_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminRefreshTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminToken"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/logout": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Admin Logout",
        "description": "Admin logout endpoint.",
        "operationId": "admin_logout_api_v1_admin_logout_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminLogoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/me": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get Current Admin Info",
        "description": "Get current admin information.",
        "operationId": "get_current_admin_info_api_v1_admin_me_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/change-password": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Change Admin Password",
        "description": "Change admin password.",
        "operationId": "change_admin_password_api_v1_admin_change_password_post",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminPasswordChangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/admins": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Create Admin",
        "description": "Create a new admin user.",
        "operationId": "create_admin_api_v1_admin_admins_post",
        "parameters": [
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List Admins",
        "description": "List all admin users.",
        "operationId": "list_admins_api_v1_admin_admins_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 20,
              "title": "Per Page"
            },
            "description": "Items per page"
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/admins/{admin_id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get Admin",
        "description": "Get admin by ID.",
        "operationId": "get_admin_api_v1_admin_admins__admin_id__get",
        "parameters": [
          {
            "name": "admin_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Admin Id"
            }
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Update Admin",
        "description": "Update admin user.",
        "operationId": "update_admin_api_v1_admin_admins__admin_id__put",
        "parameters": [
          {
            "name": "admin_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Admin Id"
            }
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Delete Admin",
        "description": "Delete (deactivate) admin user.",
        "operationId": "delete_admin_api_v1_admin_admins__admin_id__delete",
        "parameters": [
          {
            "name": "admin_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Admin Id"
            }
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/admins/{admin_id}/activate": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Activate Admin",
        "description": "Activate admin user.",
        "operationId": "activate_admin_api_v1_admin_admins__admin_id__activate_post",
        "parameters": [
          {
            "name": "admin_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Admin Id"
            }
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/users": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List Users",
        "description": "List all users with optional filtering.",
        "operationId": "list_users_api_v1_admin_users_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 20,
              "title": "Per Page"
            },
            "description": "Items per page"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search by name, email, or city",
              "title": "Search"
            },
            "description": "Search by name, email, or city"
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by active status",
              "title": "Is Active"
            },
            "description": "Filter by active status"
          },
          {
            "name": "is_verified",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by verification status",
              "title": "Is Verified"
            },
            "description": "Filter by verification status"
          },
          {
            "name": "country",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by country",
              "title": "Country"
            },
            "description": "Filter by country"
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/users/{user_id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get User",
        "description": "Get user by ID for admin view.",
        "operationId": "get_user_api_v1_admin_users__user_id__get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserProfile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Update User",
        "description": "Update user data by admin.",
        "operationId": "update_user_api_v1_admin_users__user_id__put",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserProfile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/users/{user_id}/ban": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Ban User",
        "description": "Ban a user.",
        "operationId": "ban_user_api_v1_admin_users__user_id__ban_post",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUserBanRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/users/{user_id}/unban": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Unban User",
        "description": "Unban a user.",
        "operationId": "unban_user_api_v1_admin_users__user_id__unban_post",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/stats/platform": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get Platform Stats",
        "description": "Get comprehensive platform statistics.",
        "operationId": "get_platform_stats_api_v1_admin_stats_platform_get",
        "parameters": [
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformStats"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/stats/user-activity": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get User Activity Stats",
        "description": "Get user activity statistics.",
        "operationId": "get_user_activity_stats_api_v1_admin_stats_user_activity_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 50,
              "title": "Per Page"
            },
            "description": "Items per page"
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserActivityStats"
                  },
                  "title": "Response Get User Activity Stats Api V1 Admin Stats User Activity Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/matches": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List Matches",
        "description": "List all matches with optional filtering.",
        "operationId": "list_matches_api_v1_admin_matches_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 20,
              "title": "Per Page"
            },
            "description": "Items per page"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by user ID",
              "title": "User Id"
            },
            "description": "Filter by user ID"
          },
          {
            "name": "min_similarity",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 1,
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Minimum similarity score",
              "title": "Min Similarity"
            },
            "description": "Minimum similarity score"
          },
          {
            "name": "max_similarity",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 1,
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Maximum similarity score",
              "title": "Max Similarity"
            },
            "description": "Maximum similarity score"
          },
          {
            "name": "is_viewed",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by viewed status",
              "title": "Is Viewed"
            },
            "description": "Filter by viewed status"
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminMatchListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/matches/{match_id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get Match",
        "description": "Get match by ID for admin view.",
        "operationId": "get_match_api_v1_admin_matches__match_id__get",
        "parameters": [
          {
            "name": "match_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Match Id"
            }
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminMatchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Update Match",
        "description": "Update match data by admin.",
        "operationId": "update_match_api_v1_admin_matches__match_id__put",
        "parameters": [
          {
            "name": "match_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Match Id"
            }
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminMatchUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminMatchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Delete Match",
        "description": "Delete a match by admin.",
        "operationId": "delete_match_api_v1_admin_matches__match_id__delete",
        "parameters": [
          {
            "name": "match_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Match Id"
            }
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/moderation/reports": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List Content Reports",
        "description": "List content reports for moderation.",
        "operationId": "list_content_reports_api_v1_admin_moderation_reports_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 20,
              "title": "Per Page"
            },
            "description": "Items per page"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by report status",
              "title": "Status"
            },
            "description": "Filter by report status"
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentReportListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/moderation/reports/{report_id}": {
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Update Content Report",
        "description": "Update content report status.",
        "operationId": "update_content_report_api_v1_admin_moderation_reports__report_id__put",
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Report Id"
            }
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentReportUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentReport"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/moderation/users/{user_id}/action": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Take Moderation Action",
        "description": "Take moderation action against a user.",
        "operationId": "take_moderation_action_api_v1_admin_moderation_users__user_id__action_post",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "required_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "admin",
              "title": "Required Role"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentModerationAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AdminCreateRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "Admin email address"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "title": "Password",
            "description": "Admin password"
          },
          "role": {
            "type": "string",
            "pattern": "^(admin|moderator)$",
            "title": "Role",
            "description": "Admin role"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password",
          "role"
        ],
        "title": "AdminCreateRequest",
        "description": "Request model for creating a new admin user."
      },
      "AdminListResponse": {
        "properties": {
          "admins": {
            "items": {
              "$ref": "#/components/schemas/AdminUserResponse"
            },
            "type": "array",
            "title": "Admins",
            "description": "List of admin users"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of admin users"
          },
          "page": {
            "type": "integer",
            "title": "Page",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page",
            "description": "Number of items per page"
          }
        },
        "type": "object",
        "required": [
          "admins",
          "total",
          "page",
          "per_page"
        ],
        "title": "AdminListResponse",
        "description": "Response model for admin user list."
      },
      "AdminLoginRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "Admin email address"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "title": "Password",
            "description": "Admin password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "AdminLoginRequest",
        "description": "Request model for admin login."
      },
      "AdminLoginResponse": {
        "properties": {
          "admin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdminUserResponse"
              }
            ],
            "description": "Admin user data"
          },
          "token": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdminToken"
              }
            ],
            "description": "Authentication tokens"
          }
        },
        "type": "object",
        "required": [
          "admin",
          "token"
        ],
        "title": "AdminLoginResponse",
        "description": "Response model for successful admin login."
      },
      "AdminLogoutRequest": {
        "properties": {
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token",
            "description": "Refresh token to blacklist"
          }
        },
        "type": "object",
        "required": [
          "refresh_token"
        ],
        "title": "AdminLogoutRequest",
        "description": "Request model for admin logout."
      },
      "AdminMatchListResponse": {
        "properties": {
          "matches": {
            "items": {
              "$ref": "#/components/schemas/AdminMatchResponse"
            },
            "type": "array",
            "title": "Matches",
            "description": "List of matches"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of matches"
          },
          "page": {
            "type": "integer",
            "title": "Page",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page",
            "description": "Number of items per page"
          }
        },
        "type": "object",
        "required": [
          "matches",
          "total",
          "page",
          "per_page"
        ],
        "title": "AdminMatchListResponse",
        "description": "Response model for admin match list."
      },
      "AdminMatchResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Match ID"
          },
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "User ID"
          },
          "user_name": {
            "type": "string",
            "title": "User Name",
            "description": "User name"
          },
          "user_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Email",
            "description": "User email"
          },
          "matched_user_id": {
            "type": "string",
            "title": "Matched User Id",
            "description": "Matched user ID"
          },
          "matched_user_name": {
            "type": "string",
            "title": "Matched User Name",
            "description": "Matched user name"
          },
          "matched_user_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Matched User Email",
            "description": "Matched user email"
          },
          "similarity_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Similarity Score",
            "description": "Similarity score"
          },
          "is_viewed": {
            "type": "boolean",
            "title": "Is Viewed",
            "description": "Whether match has been viewed"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Match creation timestamp"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "user_name",
          "matched_user_id",
          "matched_user_name",
          "is_viewed",
          "created_at"
        ],
        "title": "AdminMatchResponse",
        "description": "Admin view of match data."
      },
      "AdminMatchUpdateRequest": {
        "properties": {
          "similarity_score": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Similarity Score",
            "description": "Similarity score"
          },
          "is_viewed": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Viewed",
            "description": "View status"
          }
        },
        "type": "object",
        "title": "AdminMatchUpdateRequest",
        "description": "Request model for updating match data by admin."
      },
      "AdminPasswordChangeRequest": {
        "properties": {
          "current_password": {
            "type": "string",
            "title": "Current Password",
            "description": "Current password"
          },
          "new_password": {
            "type": "string",
            "minLength": 8,
            "title": "New Password",
            "description": "New password"
          }
        },
        "type": "object",
        "required": [
          "current_password",
          "new_password"
        ],
        "title": "AdminPasswordChangeRequest",
        "description": "Request model for changing admin password."
      },
      "AdminRefreshTokenRequest": {
        "properties": {
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token",
            "description": "Refresh token"
          }
        },
        "type": "object",
        "required": [
          "refresh_token"
        ],
        "title": "AdminRefreshTokenRequest",
        "description": "Request model for refreshing admin tokens."
      },
      "AdminToken": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token",
            "description": "JWT access token"
          },
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token",
            "description": "JWT refresh token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "description": "Token type",
            "default": "bearer"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In",
            "description": "Token expiration time in seconds"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "refresh_token",
          "expires_in"
        ],
        "title": "AdminToken",
        "description": "Response model for admin authentication tokens."
      },
      "AdminUpdateRequest": {
        "properties": {
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "description": "Admin email address"
          },
          "password": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 8
              },
              {
                "type": "null"
              }
            ],
            "title": "Password",
            "description": "Admin password"
          },
          "role": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^(admin|moderator)$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Role",
            "description": "Admin role"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active",
            "description": "Whether admin is active"
          }
        },
        "type": "object",
        "title": "AdminUpdateRequest",
        "description": "Request model for updating admin user data."
      },
      "AdminUserBanRequest": {
        "properties": {
          "reason": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason",
            "description": "Ban reason"
          },
          "duration_days": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 365,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Days",
            "description": "Ban duration in days"
          }
        },
        "type": "object",
        "title": "AdminUserBanRequest",
        "description": "Request model for banning/unbanning users."
      },
      "AdminUserListResponse": {
        "properties": {
          "users": {
            "items": {
              "$ref": "#/components/schemas/AdminUserProfile"
            },
            "type": "array",
            "title": "Users",
            "description": "List of users"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of users"
          },
          "page": {
            "type": "integer",
            "title": "Page",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page",
            "description": "Number of items per page"
          }
        },
        "type": "object",
        "required": [
          "users",
          "total",
          "page",
          "per_page"
        ],
        "title": "AdminUserListResponse",
        "description": "Response model for admin user list."
      },
      "AdminUserProfile": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "User ID"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "description": "User email"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "User name"
          },
          "birthday": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Birthday",
            "description": "User birthday"
          },
          "gender": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gender",
            "description": "User gender"
          },
          "country": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Country",
            "description": "User country"
          },
          "city": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "City",
            "description": "User city"
          },
          "profile_photo_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Photo Url",
            "description": "Profile photo URL"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Account active status"
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified",
            "description": "Email verification status"
          },
          "gdpr_consent": {
            "type": "boolean",
            "title": "Gdpr Consent",
            "description": "GDPR consent status"
          },
          "referral_count": {
            "type": "integer",
            "title": "Referral Count",
            "description": "Number of referrals"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Account creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update timestamp"
          },
          "last_photo_update": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Photo Update",
            "description": "Last photo update"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "is_active",
          "is_verified",
          "gdpr_consent",
          "referral_count",
          "created_at",
          "updated_at"
        ],
        "title": "AdminUserProfile",
        "description": "Admin view of user profile with additional admin fields."
      },
      "AdminUserResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Admin user ID"
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "Admin email address"
          },
          "role": {
            "type": "string",
            "title": "Role",
            "description": "Admin role (admin or moderator)"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Whether admin is active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Account creation timestamp"
          },
          "last_login": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Login",
            "description": "Last login timestamp"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "role",
          "is_active",
          "created_at"
        ],
        "title": "AdminUserResponse",
        "description": "Response model for admin user data."
      },
      "AdminUserUpdateRequest": {
        "properties": {
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active",
            "description": "Account active status"
          },
          "is_verified": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Verified",
            "description": "Email verification status"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "User name"
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "description": "User email"
          }
        },
        "type": "object",
        "title": "AdminUserUpdateRequest",
        "description": "Request model for updating user data by admin."
      },
      "AppleLoginRequest": {
        "properties": {
          "id_token": {
            "type": "string",
            "title": "Id Token",
            "description": "Apple ID token"
          },
          "authorization_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Authorization Code",
            "description": "Apple authorization code"
          },
          "user": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "User",
            "description": "Apple user data"
          }
        },
        "type": "object",
        "required": [
          "id_token"
        ],
        "title": "AppleLoginRequest",
        "description": "Apple OAuth login request schema."
      },
      "AuthResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Boolean indicating if the authentication operation succeeded",
            "example": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Human-readable message describing the operation result",
            "example": "Login successful"
          },
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Token"
              },
              {
                "type": "null"
              }
            ],
            "description": "Token data containing access and refresh tokens (only for successful auth operations)",
            "example": {
              "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
              "expires_in": 3600,
              "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
              "token_type": "bearer"
            }
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "AuthResponse",
        "description": "Authentication response schema.\n\nStandard response format for all authentication endpoints. Provides consistent\nstructure for success/failure status, user-friendly messages, and optional\ntoken data for successful operations.\n\n**Response Structure:**\n- success: Boolean indicating if the operation succeeded\n- message: Human-readable message describing the result\n- data: Optional token data (only present for successful auth operations)\n\n**Usage:**\n- All auth endpoints return this consistent format\n- Check success field to determine operation result\n- Use message for user feedback\n- Access token data when success is true"
      },
      "Body_login_oauth2_api_v1_auth_login_oauth2_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login_oauth2_api_v1_auth_login_oauth2_post"
      },
      "Body_upload_photo_api_v1_photos_upload_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_photo_api_v1_photos_upload_post"
      },
      "CacheStats": {
        "properties": {
          "total_entries": {
            "type": "integer",
            "title": "Total Entries",
            "description": "Total cache entries"
          },
          "active_entries": {
            "type": "integer",
            "title": "Active Entries",
            "description": "Active cache entries"
          },
          "expired_entries": {
            "type": "integer",
            "title": "Expired Entries",
            "description": "Expired cache entries"
          },
          "cache_ttl_hours": {
            "type": "number",
            "title": "Cache Ttl Hours",
            "description": "Cache TTL in hours"
          }
        },
        "type": "object",
        "required": [
          "total_entries",
          "active_entries",
          "expired_entries",
          "cache_ttl_hours"
        ],
        "title": "CacheStats",
        "description": "Cache statistics."
      },
      "ContentModerationAction": {
        "properties": {
          "action_type": {
            "type": "string",
            "pattern": "^(warn|ban|delete_photo|delete_account)$",
            "title": "Action Type",
            "description": "Action type"
          },
          "duration_days": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 365,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Days",
            "description": "Action duration in days"
          },
          "reason": {
            "type": "string",
            "maxLength": 500,
            "title": "Reason",
            "description": "Action reason"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Additional notes"
          }
        },
        "type": "object",
        "required": [
          "action_type",
          "reason"
        ],
        "title": "ContentModerationAction",
        "description": "Content moderation action."
      },
      "ContentReport": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Report ID"
          },
          "reporter_id": {
            "type": "string",
            "title": "Reporter Id",
            "description": "Reporter user ID"
          },
          "reporter_name": {
            "type": "string",
            "title": "Reporter Name",
            "description": "Reporter name"
          },
          "reported_user_id": {
            "type": "string",
            "title": "Reported User Id",
            "description": "Reported user ID"
          },
          "reported_user_name": {
            "type": "string",
            "title": "Reported User Name",
            "description": "Reported user name"
          },
          "report_type": {
            "type": "string",
            "title": "Report Type",
            "description": "Type of report"
          },
          "reason": {
            "type": "string",
            "title": "Reason",
            "description": "Report reason"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Report status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Report creation timestamp"
          },
          "resolved_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolved At",
            "description": "Resolution timestamp"
          },
          "resolved_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolved By",
            "description": "Admin who resolved the report"
          }
        },
        "type": "object",
        "required": [
          "id",
          "reporter_id",
          "reporter_name",
          "reported_user_id",
          "reported_user_name",
          "report_type",
          "reason",
          "status",
          "created_at"
        ],
        "title": "ContentReport",
        "description": "Content report for moderation."
      },
      "ContentReportListResponse": {
        "properties": {
          "reports": {
            "items": {
              "$ref": "#/components/schemas/ContentReport"
            },
            "type": "array",
            "title": "Reports",
            "description": "List of reports"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of reports"
          },
          "page": {
            "type": "integer",
            "title": "Page",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page",
            "description": "Number of items per page"
          }
        },
        "type": "object",
        "required": [
          "reports",
          "total",
          "page",
          "per_page"
        ],
        "title": "ContentReportListResponse",
        "description": "Response model for content report list."
      },
      "ContentReportUpdateRequest": {
        "properties": {
          "status": {
            "type": "string",
            "pattern": "^(pending|investigating|resolved|dismissed)$",
            "title": "Status",
            "description": "Report status"
          },
          "resolution_notes": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolution Notes",
            "description": "Resolution notes"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "ContentReportUpdateRequest",
        "description": "Request model for updating content report status."
      },
      "DeviceInfoResponse": {
        "properties": {
          "is_mobile": {
            "type": "boolean",
            "title": "Is Mobile",
            "description": "Whether device is mobile"
          },
          "is_tablet": {
            "type": "boolean",
            "title": "Is Tablet",
            "description": "Whether device is tablet"
          },
          "is_pc": {
            "type": "boolean",
            "title": "Is Pc",
            "description": "Whether device is PC"
          },
          "is_touch_capable": {
            "type": "boolean",
            "title": "Is Touch Capable",
            "description": "Whether device supports touch"
          },
          "is_bot": {
            "type": "boolean",
            "title": "Is Bot",
            "description": "Whether request is from a bot"
          },
          "os_family": {
            "type": "string",
            "title": "Os Family",
            "description": "Operating system family"
          },
          "os_version": {
            "type": "string",
            "title": "Os Version",
            "description": "Operating system version"
          },
          "browser_family": {
            "type": "string",
            "title": "Browser Family",
            "description": "Browser family"
          },
          "browser_version": {
            "type": "string",
            "title": "Browser Version",
            "description": "Browser version"
          },
          "device_family": {
            "type": "string",
            "title": "Device Family",
            "description": "Device family"
          },
          "device_brand": {
            "type": "string",
            "title": "Device Brand",
            "description": "Device brand"
          },
          "device_model": {
            "type": "string",
            "title": "Device Model",
            "description": "Device model"
          },
          "app_store_url": {
            "type": "string",
            "title": "App Store Url",
            "description": "App store URL for the platform"
          },
          "platform": {
            "type": "string",
            "title": "Platform",
            "description": "Platform (ios, android, web)"
          }
        },
        "type": "object",
        "required": [
          "is_mobile",
          "is_tablet",
          "is_pc",
          "is_touch_capable",
          "is_bot",
          "os_family",
          "os_version",
          "browser_family",
          "browser_version",
          "device_family",
          "device_brand",
          "device_model",
          "app_store_url",
          "platform"
        ],
        "title": "DeviceInfoResponse",
        "description": "Response for device detection."
      },
      "EmailRegistrationConfirm": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "User email address"
          },
          "verification_code": {
            "type": "string",
            "maxLength": 6,
            "minLength": 6,
            "title": "Verification Code",
            "description": "Email verification code"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "title": "Password",
            "description": "User password"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "User name"
          }
        },
        "type": "object",
        "required": [
          "email",
          "verification_code",
          "password",
          "name"
        ],
        "title": "EmailRegistrationConfirm",
        "description": "Email registration confirmation schema (Step 2)."
      },
      "EmailRegistrationRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "User email address"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "EmailRegistrationRequest",
        "description": "Email registration request schema (Step 1)."
      },
      "EmailVerificationRequest": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token",
            "description": "Email verification token"
          }
        },
        "type": "object",
        "required": [
          "token"
        ],
        "title": "EmailVerificationRequest",
        "description": "Email verification request schema."
      },
      "GoogleLoginRequest": {
        "properties": {
          "id_token": {
            "type": "string",
            "title": "Id Token",
            "description": "Google ID token"
          },
          "access_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Access Token",
            "description": "Google access token"
          }
        },
        "type": "object",
        "required": [
          "id_token"
        ],
        "title": "GoogleLoginRequest",
        "description": "Google OAuth login request schema."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LoginRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "User's registered email address",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "title": "Password",
            "description": "User's password (minimum 8 characters)",
            "example": "securepassword123"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "LoginRequest",
        "description": "User login request schema.\n\nContains the credentials required for user authentication. The email must be\na valid email format, and the password must meet minimum security requirements.\n\n**Security Requirements:**\n- Email must be a valid email format\n- Password must be at least 8 characters long\n- Passwords are hashed and compared securely\n- Failed login attempts may be rate-limited\n\n**Authentication Flow:**\n1. User provides email and password\n2. System validates email format\n3. Password is hashed and compared with stored hash\n4. If valid, JWT tokens are generated and returned"
      },
      "LogoutRequest": {
        "properties": {
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token",
            "description": "JWT refresh token to invalidate"
          }
        },
        "type": "object",
        "required": [
          "refresh_token"
        ],
        "title": "LogoutRequest",
        "description": "User logout request schema."
      },
      "MatchDiscoveryResponse": {
        "properties": {
          "matches": {
            "items": {
              "$ref": "#/components/schemas/MatchWithUser"
            },
            "type": "array",
            "title": "Matches",
            "description": "List of discovery matches"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count",
            "description": "Total number of available discovery matches"
          },
          "offset": {
            "type": "integer",
            "title": "Offset",
            "description": "Current offset for pagination"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "Number of matches returned in this batch"
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more matches available"
          }
        },
        "type": "object",
        "required": [
          "matches",
          "total_count",
          "offset",
          "limit",
          "has_more"
        ],
        "title": "MatchDiscoveryResponse",
        "description": "Schema for match discovery response with endless scroll support."
      },
      "MatchGenerationRequest": {
        "properties": {
          "count": {
            "type": "integer",
            "maximum": 50,
            "minimum": 1,
            "title": "Count",
            "description": "Number of matches to generate (1-50)",
            "default": 10
          },
          "min_similarity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Similarity",
            "description": "Minimum similarity score for matches"
          },
          "max_similarity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Similarity",
            "description": "Maximum similarity score for matches"
          }
        },
        "type": "object",
        "title": "MatchGenerationRequest",
        "description": "Schema for requesting match generation."
      },
      "MatchGenerationResponse": {
        "properties": {
          "generated_count": {
            "type": "integer",
            "title": "Generated Count",
            "description": "Number of matches generated"
          },
          "total_matches": {
            "type": "integer",
            "title": "Total Matches",
            "description": "Total matches for the user"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Generation status message"
          }
        },
        "type": "object",
        "required": [
          "generated_count",
          "total_matches",
          "message"
        ],
        "title": "MatchGenerationResponse",
        "description": "Schema for match generation response."
      },
      "MatchListResponse": {
        "properties": {
          "matches": {
            "items": {
              "$ref": "#/components/schemas/MatchWithUser"
            },
            "type": "array",
            "title": "Matches",
            "description": "List of matches"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of matches"
          },
          "page": {
            "type": "integer",
            "title": "Page",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page",
            "description": "Number of matches per page"
          },
          "has_next": {
            "type": "boolean",
            "title": "Has Next",
            "description": "Whether there are more pages"
          },
          "has_prev": {
            "type": "boolean",
            "title": "Has Prev",
            "description": "Whether there are previous pages"
          }
        },
        "type": "object",
        "required": [
          "matches",
          "total",
          "page",
          "per_page",
          "has_next",
          "has_prev"
        ],
        "title": "MatchListResponse",
        "description": "Schema for paginated match list response."
      },
      "MatchStats": {
        "properties": {
          "total_matches": {
            "type": "integer",
            "title": "Total Matches",
            "description": "Total number of matches"
          },
          "viewed_matches": {
            "type": "integer",
            "title": "Viewed Matches",
            "description": "Number of viewed matches"
          },
          "unviewed_matches": {
            "type": "integer",
            "title": "Unviewed Matches",
            "description": "Number of unviewed matches"
          },
          "high_similarity_count": {
            "type": "integer",
            "title": "High Similarity Count",
            "description": "Number of high similarity matches"
          },
          "medium_similarity_count": {
            "type": "integer",
            "title": "Medium Similarity Count",
            "description": "Number of medium similarity matches"
          },
          "low_similarity_count": {
            "type": "integer",
            "title": "Low Similarity Count",
            "description": "Number of low similarity matches"
          },
          "average_similarity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Similarity",
            "description": "Average similarity score"
          }
        },
        "type": "object",
        "required": [
          "total_matches",
          "viewed_matches",
          "unviewed_matches",
          "high_similarity_count",
          "medium_similarity_count",
          "low_similarity_count"
        ],
        "title": "MatchStats",
        "description": "Schema for match statistics."
      },
      "MatchUpdate": {
        "properties": {
          "similarity_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Similarity Score",
            "description": "Updated similarity score"
          },
          "is_viewed": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Viewed",
            "description": "Updated viewing status"
          }
        },
        "type": "object",
        "title": "MatchUpdate",
        "description": "Schema for updating a match."
      },
      "MatchWithUser": {
        "properties": {
          "similarity_score": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Similarity Score",
            "description": "Similarity score between 0.0000 and 1.0000"
          },
          "is_viewed": {
            "type": "boolean",
            "title": "Is Viewed",
            "description": "Whether the match has been viewed by the user",
            "default": false
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique match identifier"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id",
            "description": "ID of the user who owns this match"
          },
          "matched_user_id": {
            "type": "string",
            "format": "uuid",
            "title": "Matched User Id",
            "description": "ID of the matched user"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "When the match was created"
          },
          "matched_user_name": {
            "type": "string",
            "title": "Matched User Name",
            "description": "Name of the matched user"
          },
          "matched_user_profile_photo_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Matched User Profile Photo Url",
            "description": "Profile photo URL of the matched user"
          },
          "similarity_percentage": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Similarity Percentage",
            "description": "Calculate similarity percentage from score.",
            "readOnly": true
          },
          "is_high_similarity": {
            "type": "boolean",
            "title": "Is High Similarity",
            "description": "Calculate if similarity is high.",
            "readOnly": true
          },
          "is_medium_similarity": {
            "type": "boolean",
            "title": "Is Medium Similarity",
            "description": "Calculate if similarity is medium.",
            "readOnly": true
          },
          "is_low_similarity": {
            "type": "boolean",
            "title": "Is Low Similarity",
            "description": "Calculate if similarity is low.",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "matched_user_id",
          "created_at",
          "matched_user_name",
          "similarity_percentage",
          "is_high_similarity",
          "is_medium_similarity",
          "is_low_similarity"
        ],
        "title": "MatchWithUser",
        "description": "Schema for match with matched user information."
      },
      "OAuthCallbackRequest": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Authorization code from OAuth provider"
          },
          "state": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "State",
            "description": "State parameter for CSRF protection"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error from OAuth provider"
          }
        },
        "type": "object",
        "required": [
          "code"
        ],
        "title": "OAuthCallbackRequest",
        "description": "OAuth callback request schema."
      },
      "OAuthProviderInfo": {
        "properties": {
          "provider": {
            "type": "string",
            "title": "Provider",
            "description": "OAuth provider name (google, apple)"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id",
            "description": "OAuth client ID"
          },
          "redirect_uri": {
            "type": "string",
            "title": "Redirect Uri",
            "description": "OAuth redirect URI"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "description": "OAuth scope"
          },
          "auth_url": {
            "type": "string",
            "title": "Auth Url",
            "description": "OAuth authorization URL"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Human-friendly provider name"
          }
        },
        "type": "object",
        "required": [
          "provider",
          "client_id",
          "redirect_uri",
          "scope",
          "auth_url"
        ],
        "title": "OAuthProviderInfo",
        "description": "OAuth provider information schema."
      },
      "PasswordResetConfirm": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token",
            "description": "Password reset token"
          },
          "new_password": {
            "type": "string",
            "minLength": 8,
            "title": "New Password",
            "description": "New password"
          }
        },
        "type": "object",
        "required": [
          "token",
          "new_password"
        ],
        "title": "PasswordResetConfirm",
        "description": "Password reset confirmation schema."
      },
      "PasswordResetRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "User email address"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "PasswordResetRequest",
        "description": "Password reset request schema."
      },
      "PhotoDeleteResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "PhotoDeleteResponse"
      },
      "PhotoResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "file_path": {
            "type": "string",
            "title": "File Path"
          },
          "file_size": {
            "type": "integer",
            "title": "File Size"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "width": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Width"
          },
          "height": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Height"
          },
          "is_primary": {
            "type": "boolean",
            "title": "Is Primary",
            "default": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "file_path",
          "file_size",
          "mime_type",
          "created_at"
        ],
        "title": "PhotoResponse"
      },
      "PhotoUploadResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "$ref": "#/components/schemas/PhotoResponse"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message",
          "data"
        ],
        "title": "PhotoUploadResponse"
      },
      "PlatformDetectionRequest": {
        "properties": {
          "user_agent": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Agent",
            "description": "User agent string"
          },
          "referer": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referer",
            "description": "Referer URL"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url",
            "description": "Current URL"
          }
        },
        "type": "object",
        "title": "PlatformDetectionRequest",
        "description": "Request for platform detection."
      },
      "PlatformDetectionResponse": {
        "properties": {
          "platform": {
            "type": "string",
            "title": "Platform",
            "description": "Detected platform"
          },
          "confidence": {
            "type": "number",
            "title": "Confidence",
            "description": "Detection confidence (0-1)"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/app__schemas__share__SocialPlatformInfo"
              }
            ],
            "description": "Platform metadata"
          }
        },
        "type": "object",
        "required": [
          "platform",
          "confidence",
          "metadata"
        ],
        "title": "PlatformDetectionResponse",
        "description": "Response for platform detection."
      },
      "PlatformStats": {
        "properties": {
          "total_users": {
            "type": "integer",
            "title": "Total Users",
            "description": "Total number of users"
          },
          "active_users": {
            "type": "integer",
            "title": "Active Users",
            "description": "Number of active users"
          },
          "verified_users": {
            "type": "integer",
            "title": "Verified Users",
            "description": "Number of verified users"
          },
          "total_matches": {
            "type": "integer",
            "title": "Total Matches",
            "description": "Total number of matches"
          },
          "total_photos": {
            "type": "integer",
            "title": "Total Photos",
            "description": "Total number of photos"
          },
          "users_with_photos": {
            "type": "integer",
            "title": "Users With Photos",
            "description": "Users with at least one photo"
          },
          "avg_matches_per_user": {
            "type": "number",
            "title": "Avg Matches Per User",
            "description": "Average matches per user"
          },
          "avg_similarity_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avg Similarity Score",
            "description": "Average similarity score"
          },
          "users_created_today": {
            "type": "integer",
            "title": "Users Created Today",
            "description": "Users created today"
          },
          "users_created_this_week": {
            "type": "integer",
            "title": "Users Created This Week",
            "description": "Users created this week"
          },
          "users_created_this_month": {
            "type": "integer",
            "title": "Users Created This Month",
            "description": "Users created this month"
          },
          "top_countries": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Top Countries",
            "description": "Top countries by user count"
          },
          "gender_distribution": {
            "type": "object",
            "title": "Gender Distribution",
            "description": "Gender distribution"
          }
        },
        "type": "object",
        "required": [
          "total_users",
          "active_users",
          "verified_users",
          "total_matches",
          "total_photos",
          "users_with_photos",
          "avg_matches_per_user",
          "users_created_today",
          "users_created_this_week",
          "users_created_this_month",
          "top_countries",
          "gender_distribution"
        ],
        "title": "PlatformStats",
        "description": "Platform statistics for admin dashboard."
      },
      "ReferralClickRequest": {
        "properties": {
          "referral_code": {
            "type": "string",
            "title": "Referral Code",
            "description": "The referral code that was clicked"
          },
          "source": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Source",
            "description": "Source platform (whatsapp, telegram, etc.)"
          },
          "user_agent": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Agent",
            "description": "User agent string for device detection"
          },
          "ip_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ip Address",
            "description": "IP address of the clicker"
          }
        },
        "type": "object",
        "required": [
          "referral_code"
        ],
        "title": "ReferralClickRequest",
        "description": "Request for tracking a referral click."
      },
      "ReferralClickResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether tracking was successful"
          },
          "referral_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referral Id",
            "description": "ID of the created referral record"
          },
          "app_store_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "App Store Url",
            "description": "App store URL for device redirect"
          },
          "platform": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Platform",
            "description": "Detected platform (ios, android, web)"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Response message"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "ReferralClickResponse",
        "description": "Response for referral click tracking."
      },
      "ReferralCodeValidationRequest": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Referral code to validate"
          }
        },
        "type": "object",
        "required": [
          "code"
        ],
        "title": "ReferralCodeValidationRequest",
        "description": "Request for validating a referral code."
      },
      "ReferralCodeValidationResponse": {
        "properties": {
          "is_valid": {
            "type": "boolean",
            "title": "Is Valid",
            "description": "Whether the code is valid"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Validation message"
          }
        },
        "type": "object",
        "required": [
          "is_valid",
          "message"
        ],
        "title": "ReferralCodeValidationResponse",
        "description": "Response for referral code validation."
      },
      "ReferralConversionRequest": {
        "properties": {
          "referral_id": {
            "type": "string",
            "title": "Referral Id",
            "description": "ID of the referral record to convert"
          },
          "referred_user_id": {
            "type": "string",
            "title": "Referred User Id",
            "description": "ID of the user who signed up"
          }
        },
        "type": "object",
        "required": [
          "referral_id",
          "referred_user_id"
        ],
        "title": "ReferralConversionRequest",
        "description": "Request for converting a referral."
      },
      "ReferralConversionResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether conversion was successful"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Response message"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "ReferralConversionResponse",
        "description": "Response for referral conversion."
      },
      "ReferralDashboardResponse": {
        "properties": {
          "statistics": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReferralStatisticsResponse"
              }
            ],
            "description": "Referral statistics"
          },
          "recent_history": {
            "items": {
              "$ref": "#/components/schemas/ReferralHistoryItem"
            },
            "type": "array",
            "title": "Recent History",
            "description": "Recent referral history"
          },
          "available_platforms": {
            "items": {
              "$ref": "#/components/schemas/app__schemas__referral__SocialPlatformInfo"
            },
            "type": "array",
            "title": "Available Platforms",
            "description": "Available social platforms"
          },
          "referral_link": {
            "type": "string",
            "title": "Referral Link",
            "description": "User's referral link"
          },
          "referral_code": {
            "type": "string",
            "title": "Referral Code",
            "description": "User's referral code"
          }
        },
        "type": "object",
        "required": [
          "statistics",
          "recent_history",
          "available_platforms",
          "referral_link",
          "referral_code"
        ],
        "title": "ReferralDashboardResponse",
        "description": "Comprehensive referral dashboard response."
      },
      "ReferralHistoryItem": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Referral record ID"
          },
          "referral_code": {
            "type": "string",
            "title": "Referral Code",
            "description": "Referral code used"
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source",
            "description": "Source platform"
          },
          "clicked_at": {
            "type": "string",
            "title": "Clicked At",
            "description": "Click timestamp (ISO format)"
          },
          "converted_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Converted At",
            "description": "Conversion timestamp (ISO format)"
          },
          "is_converted": {
            "type": "boolean",
            "title": "Is Converted",
            "description": "Whether referral was converted"
          },
          "conversion_time": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Conversion Time",
            "description": "Time to conversion in seconds"
          },
          "referred_user": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referred User",
            "description": "Referred user information"
          }
        },
        "type": "object",
        "required": [
          "id",
          "referral_code",
          "clicked_at",
          "is_converted"
        ],
        "title": "ReferralHistoryItem",
        "description": "Individual referral history item."
      },
      "ReferralHistoryResponse": {
        "properties": {
          "referrals": {
            "items": {
              "$ref": "#/components/schemas/ReferralHistoryItem"
            },
            "type": "array",
            "title": "Referrals",
            "description": "List of referral records"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count",
            "description": "Total number of referrals"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "Maximum number of records returned"
          }
        },
        "type": "object",
        "required": [
          "referrals",
          "total_count",
          "limit"
        ],
        "title": "ReferralHistoryResponse",
        "description": "Response for referral history."
      },
      "ReferralLinkRequest": {
        "properties": {
          "source": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Source",
            "description": "Source platform (whatsapp, telegram, instagram, etc.)"
          },
          "utm_params": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Utm Params",
            "description": "Additional UTM parameters for tracking"
          }
        },
        "type": "object",
        "title": "ReferralLinkRequest",
        "description": "Request for generating a referral link."
      },
      "ReferralLinkResponse": {
        "properties": {
          "referral_code": {
            "type": "string",
            "title": "Referral Code",
            "description": "User's referral code"
          },
          "referral_url": {
            "type": "string",
            "title": "Referral Url",
            "description": "Complete referral URL with tracking parameters"
          },
          "device_info": {
            "type": "object",
            "title": "Device Info",
            "description": "Device-specific app store URLs"
          },
          "social_platforms": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Social Platforms",
            "description": "Available social platforms"
          }
        },
        "type": "object",
        "required": [
          "referral_code",
          "referral_url",
          "device_info",
          "social_platforms"
        ],
        "title": "ReferralLinkResponse",
        "description": "Response for referral link generation."
      },
      "ReferralStatisticsResponse": {
        "properties": {
          "total_referrals": {
            "type": "integer",
            "title": "Total Referrals",
            "description": "Total number of referrals"
          },
          "converted_referrals": {
            "type": "integer",
            "title": "Converted Referrals",
            "description": "Number of converted referrals"
          },
          "conversion_rate": {
            "type": "number",
            "title": "Conversion Rate",
            "description": "Conversion rate percentage"
          },
          "recent_referrals": {
            "type": "integer",
            "title": "Recent Referrals",
            "description": "Referrals in the last 30 days"
          },
          "referral_code": {
            "type": "string",
            "title": "Referral Code",
            "description": "User's referral code"
          },
          "source_stats": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Source Stats",
            "description": "Statistics by source"
          }
        },
        "type": "object",
        "required": [
          "total_referrals",
          "converted_referrals",
          "conversion_rate",
          "recent_referrals",
          "referral_code",
          "source_stats"
        ],
        "title": "ReferralStatisticsResponse",
        "description": "Response for referral statistics."
      },
      "RefreshTokenRequest": {
        "properties": {
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token",
            "description": "JWT refresh token"
          }
        },
        "type": "object",
        "required": [
          "refresh_token"
        ],
        "title": "RefreshTokenRequest",
        "description": "Refresh token request schema."
      },
      "ShareCardInfo": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "User ID"
          },
          "user_name": {
            "type": "string",
            "title": "User Name",
            "description": "User name"
          },
          "match_count": {
            "type": "integer",
            "title": "Match Count",
            "description": "Number of matches"
          },
          "top_matches": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Top Matches",
            "description": "Top 3 matches"
          },
          "card_dimensions": {
            "type": "object",
            "title": "Card Dimensions",
            "description": "Card dimensions"
          },
          "has_photo": {
            "type": "boolean",
            "title": "Has Photo",
            "description": "Whether user has photos"
          },
          "share_text": {
            "type": "string",
            "title": "Share Text",
            "description": "Platform-optimized share text"
          },
          "platform": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Platform",
            "description": "Social media platform"
          },
          "platform_metadata": {
            "type": "object",
            "title": "Platform Metadata",
            "description": "Platform-specific metadata"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "user_name",
          "match_count",
          "top_matches",
          "card_dimensions",
          "has_photo",
          "share_text",
          "platform_metadata"
        ],
        "title": "ShareCardInfo",
        "description": "Information about a share card."
      },
      "ShareCardRequest": {
        "properties": {
          "force_regenerate": {
            "type": "boolean",
            "title": "Force Regenerate",
            "description": "Force regeneration ignoring cache",
            "default": false
          },
          "platform": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Platform",
            "description": "Social media platform for optimization"
          }
        },
        "type": "object",
        "title": "ShareCardRequest",
        "description": "Request for share card generation."
      },
      "ShareCardResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether generation was successful"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Response message"
          },
          "image_data": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Data",
            "description": "PNG image data"
          },
          "content_type": {
            "type": "string",
            "title": "Content Type",
            "description": "Content type",
            "default": "image/png"
          },
          "platform": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Platform",
            "description": "Social media platform used"
          },
          "share_text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Share Text",
            "description": "Platform-optimized share text"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "ShareCardResponse",
        "description": "Response for share card generation."
      },
      "ShareStatisticsResponse": {
        "properties": {
          "total_shares": {
            "type": "integer",
            "title": "Total Shares",
            "description": "Total number of shares"
          },
          "platform_shares": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Platform Shares",
            "description": "Shares by platform"
          },
          "recent_shares": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Recent Shares",
            "description": "Recent share activity"
          },
          "period_days": {
            "type": "integer",
            "title": "Period Days",
            "description": "Number of days in the period"
          }
        },
        "type": "object",
        "required": [
          "total_shares",
          "platform_shares",
          "recent_shares",
          "period_days"
        ],
        "title": "ShareStatisticsResponse",
        "description": "Response for share statistics."
      },
      "ShareTextRequest": {
        "properties": {
          "platform": {
            "type": "string",
            "title": "Platform",
            "description": "Social media platform"
          },
          "user_name": {
            "type": "string",
            "title": "User Name",
            "description": "User's name"
          },
          "match_count": {
            "type": "integer",
            "title": "Match Count",
            "description": "Number of matches"
          },
          "top_match_name": {
            "type": "string",
            "title": "Top Match Name",
            "description": "Name of top match"
          },
          "similarity_percentage": {
            "type": "number",
            "title": "Similarity Percentage",
            "description": "Similarity percentage"
          },
          "app_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "App Url",
            "description": "App download URL"
          }
        },
        "type": "object",
        "required": [
          "platform",
          "user_name",
          "match_count",
          "top_match_name",
          "similarity_percentage"
        ],
        "title": "ShareTextRequest",
        "description": "Request for generating share text."
      },
      "ShareTextResponse": {
        "properties": {
          "share_text": {
            "type": "string",
            "title": "Share Text",
            "description": "Generated share text"
          },
          "platform": {
            "type": "string",
            "title": "Platform",
            "description": "Platform used"
          },
          "text_length": {
            "type": "integer",
            "title": "Text Length",
            "description": "Length of generated text"
          },
          "max_length": {
            "type": "integer",
            "title": "Max Length",
            "description": "Maximum allowed length"
          },
          "is_truncated": {
            "type": "boolean",
            "title": "Is Truncated",
            "description": "Whether text was truncated"
          }
        },
        "type": "object",
        "required": [
          "share_text",
          "platform",
          "text_length",
          "max_length",
          "is_truncated"
        ],
        "title": "ShareTextResponse",
        "description": "Response for share text generation."
      },
      "SocialLoginResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Operation success status"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Response message"
          },
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Token"
              },
              {
                "type": "null"
              }
            ],
            "description": "Token data if successful"
          },
          "user_created": {
            "type": "boolean",
            "title": "User Created",
            "description": "Whether a new user was created",
            "default": false
          },
          "user_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Info",
            "description": "User information from social provider"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "SocialLoginResponse",
        "description": "Social login response schema."
      },
      "Token": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token",
            "description": "JWT access token for API authentication",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          },
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token",
            "description": "JWT refresh token for obtaining new access tokens",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "description": "Token type for Authorization header",
            "default": "bearer",
            "example": "bearer"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In",
            "description": "Access token expiration time in seconds",
            "example": 3600
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "refresh_token",
          "expires_in"
        ],
        "title": "Token",
        "description": "JWT token response schema.\n\nContains the authentication tokens returned after successful login or token refresh.\nThe access token is used for API authentication, while the refresh token is used\nto obtain new access tokens without re-authentication.\n\n**Token Usage:**\n- access_token: Include in Authorization header for API requests\n- refresh_token: Use to obtain new tokens when access token expires\n- token_type: Always \"bearer\" for JWT tokens\n- expires_in: Seconds until access token expires\n\n**Security Notes:**\n- Store tokens securely (HTTPS only, secure storage)\n- Access tokens have short expiration (typically 1 hour)\n- Refresh tokens have longer expiration (typically 7-30 days)\n- Refresh tokens are single-use and invalidated after use"
      },
      "TokenBlacklistRequest": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token",
            "description": "Token to blacklist"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason",
            "description": "Reason for blacklisting"
          }
        },
        "type": "object",
        "required": [
          "token"
        ],
        "title": "TokenBlacklistRequest",
        "description": "Token blacklist request schema."
      },
      "TokenBlacklistResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Operation success status"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Response message"
          },
          "blacklisted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Blacklisted At",
            "description": "Blacklist timestamp"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "TokenBlacklistResponse",
        "description": "Token blacklist response schema."
      },
      "TrackShareRequest": {
        "properties": {
          "platform": {
            "type": "string",
            "title": "Platform",
            "description": "Social media platform"
          },
          "user_agent": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Agent",
            "description": "User agent string"
          },
          "referer": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referer",
            "description": "Referer URL"
          },
          "ip_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ip Address",
            "description": "IP address"
          }
        },
        "type": "object",
        "required": [
          "platform"
        ],
        "title": "TrackShareRequest",
        "description": "Request for tracking a share."
      },
      "TrackShareResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether tracking was successful"
          },
          "share_id": {
            "type": "string",
            "title": "Share Id",
            "description": "Share statistics ID"
          },
          "platform": {
            "type": "string",
            "title": "Platform",
            "description": "Platform tracked"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "When the share was tracked"
          }
        },
        "type": "object",
        "required": [
          "success",
          "share_id",
          "platform",
          "timestamp"
        ],
        "title": "TrackShareResponse",
        "description": "Response for tracking a share."
      },
      "UserActivityStats": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "User ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "User name"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "description": "User email"
          },
          "match_count": {
            "type": "integer",
            "title": "Match Count",
            "description": "Number of matches"
          },
          "photo_count": {
            "type": "integer",
            "title": "Photo Count",
            "description": "Number of photos"
          },
          "last_activity": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Activity",
            "description": "Last activity timestamp"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Account active status"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "name",
          "match_count",
          "photo_count",
          "is_active"
        ],
        "title": "UserActivityStats",
        "description": "User activity statistics."
      },
      "UserAuthInfo": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "User ID"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "description": "User email"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "User name"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "User active status"
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified",
            "description": "User verification status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Account creation time"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "name",
          "is_active",
          "is_verified",
          "created_at"
        ],
        "title": "UserAuthInfo",
        "description": "User authentication information."
      },
      "UserProfile": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "User ID (UUID)"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "description": "User email address"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "User full name"
          },
          "birthday": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Birthday",
            "description": "User birthday (YYYY-MM-DD)"
          },
          "gender": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gender",
            "description": "Gender: male, female, other, prefer_not_to_say"
          },
          "country": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Country",
            "description": "Country name"
          },
          "city": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "City",
            "description": "City name"
          },
          "profile_photo_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Photo Url",
            "description": "URL to profile photo"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Account active status"
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified",
            "description": "Email verification status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Account creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update timestamp"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "is_active",
          "is_verified",
          "created_at",
          "updated_at"
        ],
        "title": "UserProfile",
        "description": "Public user profile information returned by the API."
      },
      "UserProfileResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Operation success status"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Human readable message"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserProfile"
              }
            ],
            "description": "User profile data"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message",
          "data"
        ],
        "title": "UserProfileResponse",
        "description": "Standard envelope for profile responses."
      },
      "UserUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "birthday": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Birthday"
          },
          "gender": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gender",
            "description": "male, female, other, prefer_not_to_say"
          },
          "country": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Country"
          },
          "city": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "City"
          }
        },
        "type": "object",
        "title": "UserUpdate",
        "description": "Payload for updating user profile fields."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "app__schemas__referral__SocialPlatformInfo": {
        "properties": {
          "platform": {
            "type": "string",
            "title": "Platform",
            "description": "Platform identifier"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Platform display name"
          },
          "share_url_template": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Share Url Template",
            "description": "Share URL template"
          },
          "icon_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon Url",
            "description": "Platform icon URL"
          }
        },
        "type": "object",
        "required": [
          "platform",
          "name"
        ],
        "title": "SocialPlatformInfo",
        "description": "Information about social platforms."
      },
      "app__schemas__share__SocialPlatformInfo": {
        "properties": {
          "platform": {
            "type": "string",
            "title": "Platform",
            "description": "Platform name"
          },
          "image_dimensions": {
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "type": "array",
            "maxItems": 2,
            "minItems": 2,
            "title": "Image Dimensions",
            "description": "Optimal image dimensions"
          },
          "max_text_length": {
            "type": "integer",
            "title": "Max Text Length",
            "description": "Maximum text length"
          },
          "supports_images": {
            "type": "boolean",
            "title": "Supports Images",
            "description": "Whether platform supports images"
          },
          "supports_deep_linking": {
            "type": "boolean",
            "title": "Supports Deep Linking",
            "description": "Whether platform supports deep linking"
          }
        },
        "type": "object",
        "required": [
          "platform",
          "image_dimensions",
          "max_text_length",
          "supports_images",
          "supports_deep_linking"
        ],
        "title": "SocialPlatformInfo",
        "description": "Information about a social media platform."
      }
    }
  }
}
